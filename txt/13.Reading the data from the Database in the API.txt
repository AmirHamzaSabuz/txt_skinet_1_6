ProductsController.cs => before 
	using Microsoft.AspNetCore.Mvc;
	namespace API.Controllers
	{
			[ApiController]
			[Route("api/[controller]")]
			public class ProductsController : ControllerBase 
			{
				[HttpGet]
				public string GetProducts()
				{
					return "this will be a list of products";
				}
				
				[HttpGet("{id}")]
				public string GetProduct(int id)
				{
					return "single product";
				}
			}
	}
	
====

ProductsController.cs => after (1st Type)
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Core.Entities;
	using Infrastructure.Data;
	using Microsoft.AspNetCore.Mvc;
	using Microsoft.EntityFrameworkCore;
	namespace API.Controllers
	{
			[ApiController]
			[Route("api/[controller]")]
			public class ProductsController : ControllerBase 
			{
				private readonly StoreContext _context;
				public ProductsController(StoreContext context)
				{
					_context = context;
				}
				
				[HttpGet]
				public async Task<ActionResult<List<Product>>>  GetProducts()
				{
					var products = await _context.Products.ToListAsync();
					return Ok(products);
				}
				
				[HttpGet("{id}")]
				public async Task<ActionResult<Product>> GetProduct(int id)
				{ 
					return await _context.Products.FindAsync(id); 
				}
			}
	}
====
skinet =>  cmd => 
	cd API 
API => cmd =>
	dotnet watch run 
===========	
https://localhost:5001/api/products 
https://localhost:5001/api/products/2
====

ProductsController.cs => after (2nd Type)
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Core.Entities;
	using Infrastructure.Data;
	using Microsoft.AspNetCore.Mvc;
	using Microsoft.EntityFrameworkCore;
	namespace API.Controllers
	{
			[ApiController]
			[Route("api/[controller]")]
			public class ProductsController : ControllerBase 
			{
				private readonly StoreContext _context;

				public ProductsController(StoreContext context)
				{
					_context = context;
				}
				
				// GET: api/Products
				[HttpGet]
				public async Task<ActionResult<IEnumerable<Product>>> GetProducts()
				{
					return await _context.Products.ToListAsync();
				}
				
				// GET: api/Products/5
				[HttpGet("{id}")]
				public async Task<ActionResult<Product>> GetProduct(int id)
				{
					var product = await _context.Products.FindAsync(id);

					if (product == null)
					{
						return NotFound();
					}
					return product;
				}
			}
	}
==========
skinet => cmd => 
	cd API 
API => cmd =>
	dotnet watch run 
========	
https://localhost:5001/api/products 
https://localhost:5001/api/products/2	


cmd => Saaf => 

Save all

=============

git add .
git commit -m "Reading the data from the Database in the API"
git push

