1.	Controllers/BaseApiController.cs
2.	API/Errors/ApiResponse.cs
3	Controllers/BuggyController.cs
4.	ApiException.cs

5.	API/Middleware/ExceptionMiddleware.cs
6.	Errors/ApiValidationErrorResponse.cs
7.	API.csproj
8.	API/ErrorControllers.cs

9.	WeatherForecastController.cs
10.	Extensions/ApplicationServicesExtensions.cs
11.	Extensions/SwaggerServiceExtensions.cs



Controllers/BaseApiController.cs => after 

	using Microsoft.AspNetCore.Mvc;

	namespace API.Controllers
	{
		[ApiController]
		[Route("api/[controller]")]
		public class BaseApiController : ControllerBase
		{
			
		}
	}


API/Errors/ApiResponse.cs => after

	using System;

	namespace API.Errors
	{
		public class ApiResponse
		{
			public ApiResponse(int statusCode, string message = null)
			{
				StatusCode = statusCode;
				Message = message ?? GetDefaultMessageForStatusCode(statusCode);
			}

			public int StatusCode {get; set;}
			public string Message {get; set;}

			private string GetDefaultMessageForStatusCode(int statusCode)
			{
				return statusCode switch 
				{
					400 => "A bad request, you have made",
					401 => "Authorized, you are not",
					404 => "Resource found, it was not",
					500 => "Errors are the path to the dark side. Errors lead to anger. Anger leads to hate. Hate leads to career change",
					_ => null,
				};
			}


		}
	
	}


Controllers/BuggyController.cs => after 

	using API.Errors;
	using Infrastructure.Data;
	using Microsoft.AspNetCore.Mvc;

	namespace API.Controllers
	{
		public class BuggyController : BaseApiController
		{
			private readonly StoreContext _context;
			public BuggyController(StoreContext context)
			{
				_context = context;
			}

			[HttpGet("notfound")]
			public ActionResult GetNotFoundRequest()
			{
				var thing = _context.Products.Find(42);
				if(thing == null)
				{
					return NotFound(new ApiResponse(404));
				}
				return Ok();
			}


			[HttpGet("servererror")]
			public ActionResult GetServerError()
			{
				var thing = _context.Products.Find(42);
				var thingToReturn = thing.ToString();
				return Ok();
			}        


			[HttpGet("badrequest")]
			public ActionResult GetBadRequest()
			{
				return BadRequest(new ApiResponse(400));
			} 

			[HttpGet("badrequest/{id}")]
			public ActionResult GetBadRequest(int id)
			{
				return Ok();
			} 

		}
	}


ApiException.cs => after 

	namespace API.Errors
	{
		public class ApiException : ApiResponse
		{
			public ApiException(int statusCode, string message = null, string details = null) : base(statusCode, message)
			{
				Details = details;
			}

			public string Details { get; set; }
		}
	}


Above Clear. 11 Oct 2021 

API/Middleware/ExceptionMiddleware.cs =>

	using System;
	using System.Net;
	using System.Text.Json;
	using System.Threading.Tasks;
	using API.Errors;
	using Microsoft.AspNetCore.Http;
	using Microsoft.Extensions.Hosting;
	using Microsoft.Extensions.Logging;

	namespace API.Middleware
	{
		public class ExceptionMiddleware
		{


			private readonly RequestDelegate _next;
			private readonly ILogger<ExceptionMiddleware> _logger;
			private readonly IHostEnvironment _env;



			public ExceptionMiddleware(	RequestDelegate next,
							ILogger<ExceptionMiddleware> logger,
							IHostEnvironment env)
			{
				_next = next;
				_logger = logger;
				_env = env;
			}



			public async Task InvokeAsync(HttpContext context)
			{


				try
				{
					await _next(context);
				}


				catch (Exception ex)
				{
					_logger.LogError(ex, ex.Message);
					context.Response.ContentType = "application/json";
					context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;


					var response = _env.IsDevelopment() ? new ApiException((int)HttpStatusCode.InternalServerError, ex.Message, ex.StackTrace.ToString())
					: new ApiException((int)HttpStatusCode.InternalServerError);


					var options = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
					var json = JsonSerializer.Serialize(response, options);
					await context.Response.WriteAsync(json);

				}
			}
		}
	}


Errors/ApiValidationErrorResponse.cs => 

	using System.Collections.Generic;

	namespace API.Errors
	{
		public class ApiValidationErrorResponse : ApiResponse
		{
			public ApiValidationErrorResponse() : base(400)
			{

			}

			public IEnumerable<string> Errors { get; set; }

		}
	}


API.csproj => 
	
	<Project Sdk="Microsoft.NET.Sdk.Web">
	  <PropertyGroup>
		<TargetFramework>net5.0</TargetFramework>
	  </PropertyGroup>
	  <ItemGroup>

		<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="5.0.0" NoWarn="NU1605"/>
		<PackageReference Include="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="5.0.0" NoWarn="NU1605"/>
		<PackageReference Include="Swashbuckle.AspNetCore" Version="5.6.3"/>

		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="5.0.1"/>
		<PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="8.1.0"/>

		<PackageReference Include="Swashbuckle.AspNetCore.SwaggerGen" Version="5.6.3"/>
		<PackageReference Include="Swashbuckle.AspNetCore.SwaggerUI" Version="5.6.3"/>

	  </ItemGroup>
	  <ItemGroup>
		<ProjectReference Include="..\Infrastructure\Infrastructure.csproj"/>
	  </ItemGroup>
	</Project>


API/ErrorControllers.cs => after 

	using API.Errors;
	using Microsoft.AspNetCore.Mvc;

	namespace API.Controllers
	{
		[Route("errors/{code}")]
		[ApiExplorerSettings(IgnoreApi = true)]
		public class ErrorControllers : BaseApiController
		{
			public IActionResult Error(int code)
			{
				return new ObjectResult(new ApiResponse(code));
			}
		}
	}


WeatherForecastController.cs =>

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Threading.Tasks;
	using Microsoft.AspNetCore.Mvc;
	using Microsoft.Extensions.Logging;

	namespace API.Controllers
	{
		[ApiController]
		[Route("[controller]")]
		[ApiExplorerSettings(IgnoreApi = true)]
		public class WeatherForecastController : ControllerBase
		{
			private static readonly string[] Summaries = new[]
			{
				"Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
			};



			private readonly ILogger<WeatherForecastController> _logger;
			public WeatherForecastController(ILogger<WeatherForecastController> logger)
			{
				_logger = logger;
			}



			[HttpGet]
			public IEnumerable<WeatherForecast> Get()
			{

				var rng = new Random();
				return Enumerable.Range(1, 5).Select(index => new WeatherForecast
				{

					Date = DateTime.Now.AddDays(index),
					TemperatureC = rng.Next(-20, 55),
					Summary = Summaries[rng.Next(Summaries.Length)]


				})
				.ToArray();
			}
		}
	}



Extensions/ApplicationServicesExtensions.cs => 

	using System.Linq;
	using API.Errors;
	using Core.Interfaces;
	using Infrastructure.Data;
	using Microsoft.AspNetCore.Mvc;
	using Microsoft.Extensions.DependencyInjection;

	namespace API.Extensions
	{
		public static class ApplicationServicesExtensions
		{
			public static IServiceCollection AddApplicationServices(this IServiceCollection services)
			{


				services.AddScoped<IProductRepository, ProductRepository>();
				services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));
				services.Configure<ApiBehaviorOptions>(options =>
				{

					options.InvalidModelStateResponseFactory = actionContext =>
					{
						var errors = actionContext.ModelState
						.Where(e => e.Value.Errors.Count > 0)
						.SelectMany(x => x.Value.Errors)
						.Select(x => x.ErrorMessage).ToArray();


						var errorResponse = new ApiValidationErrorResponse
						{
							Errors = errors
						};
						return new BadRequestObjectResult(errorResponse);
					};
				});
				return services;
			}
		}
	}


Extensions/SwaggerServiceExtensions.cs => 

	using Microsoft.AspNetCore.Builder;
	using Microsoft.Extensions.DependencyInjection;
	using Microsoft.OpenApi.Models;

	namespace API.Extensions
	{
		public static class SwaggerServiceExtensions
		{
			public static IServiceCollection AddSwaggerDocumentation(this IServiceCollection services)
			{
				services.AddSwaggerGen(c =>
				{
					c.SwaggerDoc("v1", new OpenApiInfo { Title = "API", Version = "v1" });
				});

				return services;
			}



			public static IApplicationBuilder UseSwaggerDocumentation(this IApplicationBuilder app)
			{
				app.UseSwagger();
				app.UseSwaggerUI(c => { c.SwaggerEndpoint("/swagger/v1/swagger.json", "API v1"); });

				return app;
			}
		}
	} 
	